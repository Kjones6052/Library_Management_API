API Documentation

Be clear and concise - ensure the documentation is easy to read and understand. Use simple language, avoid jargon, and include examples.

Provide detailed examples - include practical examples for each endpoint and data format to demonstrate how to use the API.

Keep it up to date - make sure your documentation reflects the latest version of the API and remains accurate.

Organize it well - structure the documentation logically, with clear sections and a table of contents for easy navigation.

Offer support and feedback - if you're going to publish an API provide ways for developers to ask questions and give feedback. This can be as easy as pinning a 
support email to the top of the documentation.

Be mindful of indentations - everything should line up accordingly
check out indent-rainbow in extensions marketplace

Recycle format, change details, rinse and repeat

Pluralization - paths, tags, parameters, responses, etc

------------

TDD => Test Driven Development

write the tests before writing the code 

helps improve code quality, speeds up development, and reduces bugs

TDD Cycle = Red - Green - Refactor
Red = write a test that fails, testing for functionality means the test should fail due to no implemented functionality
Greed = write the simplest code that passes the test, discard any code that doesn't serve the purpose
Refactor = improve the code, make it cleaner, more readable, and more efficient

Unit Testing = test individual components in isolation to handle bugs
 - the results of tests and the state of the application should not change the results of the test
 
when refactoring code consider error handling, use try/except blocks to handle any potential errors

adding try/except blocks will handle potential errors more gracefully but may add to run time

------------

using the testing config allows us to apply tests to our code without changing our existing data

using sqlite database is good for testing creation and manipulation of data

when testing a route consisting of only the url-prefix, must use a trailing "/" for instance "/members/"

if 'python -m unittest discover tests' doesn't run the tests try 'python -m unittest discover -s app/tests'

------------

DevOps => combining software development with information technology operations

CI/CD 

CI => Continuous Integration: updating repo frequenty to work more efficiently with others

write code => upload to repo => build => test => repeat

CD => Continuous Deployment: deploying changes to production after passing automated tests

build => test => deploy approval => deploy => repeat

Key Points:
- Daily Commits: multiple commits a day to keep code up to date for more efficient debugging
- Build Previous Mainline Commit: pull latest changes from the repo and build on top to maintain the latest version
- Unique Source: builds should be triggered by events to avoid unnecessary builds
- Builds Fast & Automated: allows feedback on changes and reduces time to deliver new features
- Builds Test: automated testing to verify code correctness ensures high quality code is deployed
- Correct Builds Faster: identify issues and correct them asap to ensure codebase is always deployable
- Test Clone Production Env: testing environment should closely resemble the production environment to aid in issues being discovered
- Visibility of CI: all team members should see status of pipeline to ensure high code quality
- Automate Deployment: once code changes pass predefined autotesting they should auto deploy into production to ensure production is always up to date
- Get Last Executable: pipeline should produce a deployable artifact to ensure code changes are packaged for deployment

GitHub Actions

- Automates Testing: trigger testing when code changes are pushed to repo to catch issues before code is merged into mainbase
- Build: automating the build process ensures the application compiles successfully and build process is not corrupted
- Deployment: automate deployment with GitHub triggers for various environments
- Code Reviews: automate code reviews lik enforcing coding standards or running linters on pulll requests
- Release Management: automate the creation of releases, release nootes, and packing and publishing the software
- Integration Features: see GitHub for details

GitHub Actions uses a YAML syntax to define the workflows and is very flexible. You can create workflows that respond to a variety of GitHub events such as push, 
pull requests, issue creation, and more. You can also reuse and share actions created by the GitHub community.

------------

